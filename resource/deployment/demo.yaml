apiVersion: v1
kind: Service
metadata:
  name: test-database
spec:
  selector:
    app: web
    role: test-database
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: web
    role: test-database
  name: test-database
spec:
  replicas: 3
  selector:
    matchLabels:
        app: web
        role: test-database
  template:
    metadata:
      labels:
        app: web
        role: test-database
    spec:
      containers:
      - args:
        - sh
        - -c
        - while true; do { printf 'HTTP/1.1 200 OK\r\n\n I am a test database\n'; } | nc -l -p  80; done
        image: busybox
        name: alpine
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
        ports:
        - containerPort: 80
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: test-frontend
spec:
  selector:
    app: web
    role: test-frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: web
    role: test-frontend
  name: test-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
        app: web
        role: test-frontend
  template:
    metadata:
      labels:
        app: web
        role: test-frontend
    spec:
      containers:
      - args:
        - sh
        - -c
        - while true; do { printf 'HTTP/1.1 200 OK\r\n\n I am a test frontend\n'; } | nc -l -p  80; done
        image: busybox
        name: alpine
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
        ports:
        - containerPort: 80
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: test-microservice
spec:
  selector:
    app: web
    role: test-microservice
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: web
    role: test-microservice
  name: test-microservice
spec:
  replicas: 3
  selector:
    matchLabels:
        app: web
        role: test-microservice
  template:
    metadata:
      labels:
        app: web
        role: test-microservice
    spec:
      containers:
      - args:
        - sh
        - -c
        - while true; do { printf 'HTTP/1.1 200 OK\r\n\n I am a test microservice\n'; } | nc -l -p  80; done
        image: busybox
        name: alpine
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
        ports:
        - containerPort: 80
          protocol: TCP
